---
- name: Ensure required dependencies are installed
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop:
    - curl
    - iptables
    - socat
    - conntrack
    - firewalld


- name: Disable Swap (K3s does not support swap)
  command: swapoff -a
  ignore_errors: yes

- name: Disable Swap Permanently
  replace:
    path: /etc/fstab
    regexp: '^(.*\sswap\s.*)$'
    replace: '#\1'

- name: Uninstall Server
  shell: |
    k3s-agent-uninstall.sh
  ignore_errors: yes

# curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
# curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="server" sh -s - 
- name: Download and install k3s
  ansible.builtin.shell: >    
    curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--flannel-backend none --token Zq295set" sh -s - 
  args:
    creates: /usr/local/bin/k3s
  become: true

- name: Ensure k3s service is enabled and running
  ansible.builtin.systemd:
    name: k3s
    enabled: yes
    state: started
  become: true

- name: Verify k3s installation
  ansible.builtin.command: k3s --version
  register: k3s_version
  changed_when: false

- name: Show installed k3s version
  ansible.builtin.debug:
    msg: "Installed k3s version: {{ k3s_version.stdout }}"

- name: Ensure kubeconfig file has correct permissions
  ansible.builtin.file:
    path: /etc/rancher/k3s/k3s.yaml
    mode: '0644'
  become: true


- name: Setup KubConfig
  include_tasks: setup_kubeconfig.yml

- name: Display K3s nodes
  debug:
    var: kubectl_output.stdout_lines

- name: Display join command for worker nodes
  shell: cat /var/lib/rancher/k3s/server/token
  register: k3s_token_output

- name: Show the command to join worker nodes
  debug:
    msg: "Worker nodes can join using the following command: k3s agent --server https://k3smaster.local:6443 --token {{ k3s_token_output.stdout }}"

- name: Copy k3s.yaml from master node to local machine
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /tmp/{{ inventory_hostname }}-k3s.yaml
    flat: yes

 
- name: Read the kubeconfig file
  delegate_to: localhost
  become: no
  slurp:
    src: /tmp/{{ inventory_hostname }}-k3s.yaml
  register: kubeconfig_content

- name: Replace 127.0.0.1 with FQDN
  delegate_to: localhost
  become: no
  set_fact:
    updated_kubeconfig: "{{ kubeconfig_content.content | b64decode | regex_replace('127.0.0.1', 'k3smaster.local') }}"

# Install k9s
- name: Download k9s binary
  ansible.builtin.get_url:
    url: "https://github.com/derailed/k9s/releases/latest/download/k9s_Linux_amd64.tar.gz"
    dest: "/tmp/k9s_Linux_amd64.tar.gz"
    mode: '0644'
  become: true

- name: Extract k9s binary
  ansible.builtin.unarchive:
    src: "/tmp/k9s_Linux_amd64.tar.gz"
    dest: "/usr/local/bin"
    remote_src: yes
    mode: '0755'
  become: true

- name: Ensure k9s uses the k3s kubeconfig
  ansible.builtin.lineinfile:
    path: /root/.bashrc
    line: 'export KUBECONFIG=/etc/rancher/k3s/k3s.yaml'
    create: yes
  become: true

- name: Apply kubeconfig environment for the current session
  ansible.builtin.shell: "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml"
  become: true

- name: Uninstall Traefik from k3s
  command: kubectl delete -f /var/lib/rancher/k3s/server/manifests/traefik.yaml
  ignore_errors: yes

- name: Create MetalLB IPAddressPool config
  copy:
    dest: /tmp/metallb-ipaddresspool.yaml
    content: |
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: default-pool
        namespace: metallb-system
      spec:
        addresses:
        - 10.10.50.200-10.10.50.220

#       ---

#       apiVersion: metallb.io/v1beta1
#       kind: L2Advertisement
#       metadata:
#         name: l2adv
#         namespace: metallb-system
#       spec:
#         ipAddressPools:
#         - default-pool
#   register: metallb_ipconfig

# - name: Apply MetalLB IPAddressPool config
#   command: kubectl apply -f /tmp/metallb-ipaddresspool.yaml
#   when: metallb_ipconfig is changed